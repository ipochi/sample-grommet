'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDocAsJSON;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function buildShapeFormat(validate) {
  var format = {};
  Object.keys(validate.args).forEach(function (arg) {
    var element = validate.args[arg];
    if (element.type === 'shape') {
      format[arg] = buildShapeFormat(element, true);
    } else {
      format[arg] = getFormat(element);
    }
  });
  return format;
}

function getFormat(validate) {
  switch (validate.type) {
    case 'arrayOf':
      return '[' + validate.args.type + ', ...]';
    case 'bool':
      return 'boolean';
    case 'func':
      return 'function';
    case 'instanceOf':
      return 'new ' + validate.args.name + '(...)';
    case 'objectOf':
      return '{ test: ' + validate.args.type + ', ... }';
    case 'oneOf':
      return validate.args.join('&#124;');
    case 'oneOfType':
      return validate.args.reduce(function (prev, arg) {
        return '' + prev + getFormat(arg) + '&#124;';
      }, '').slice(0, -6);
    case 'shape':
      return JSON.stringify(buildShapeFormat(validate));
    default:
      return validate.type ? validate.type : 'custom';
  }
}
function getPropTypeAsJson(propType, propName, defaultValue) {
  var _propType$$$reactDesc = propType.$$reactDesc.options;
  var deprecated = _propType$$$reactDesc.deprecated;
  var format = _propType$$$reactDesc.format;
  var required = _propType$$$reactDesc.required;

  var extras = _objectWithoutProperties(_propType$$$reactDesc, ['deprecated', 'format', 'required']);

  var validate = propType.$$reactDesc.validate;

  var documentation = {
    description: propType.$$reactDesc.description,
    name: propName
  };

  if (defaultValue) {
    documentation.defaultValue = defaultValue;
  }

  if (deprecated) {
    documentation.deprecated = deprecated;
  }

  if (required) {
    documentation.required = required;
  }

  if (Object.keys(extras).length > 0) {
    documentation.extras = extras;
  }

  documentation.format = format || getFormat(validate);

  return documentation;
}

function getDocAsJSON(component) {
  if (!component) {
    throw new Error('getDocAsJSON: component is required');
  }

  var documentation = {
    name: component.displayName || component.name
  };
  if (component.$$reactDesc) {
    documentation.description = component.$$reactDesc.description;

    var _component$$$reactDes = component.$$reactDesc.options;
    var deprecated = _component$$$reactDes.deprecated;

    var extras = _objectWithoutProperties(_component$$$reactDes, ['deprecated']);

    if (deprecated) {
      documentation.deprecated = deprecated;
    }

    if (Object.keys(extras).length > 0) {
      documentation.extras = extras;
    }

    if (component.propTypes) {
      (function () {
        var propTypes = [];
        Object.keys(component.propTypes).forEach(function (propName) {
          var propType = component.propTypes[propName];
          if (propType.$$reactDesc) {
            propTypes.push(getPropTypeAsJson(propType, propName, component.defaultProps[propName]));
          }
        });
        if (propTypes.length > 0) {
          documentation.properties = propTypes;
        }
      })();
    }
  }
  return documentation;
}